# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Pants project contributors
# This file is distributed under the same license as the pex package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pex 2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-25 12:04+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../whatispex.rst:5
msgid "What are .pex files?"
msgstr "什么是 .pex 文件？"

#: ../../whatispex.rst:8
msgid "tl;dr"
msgstr ""

#: ../../whatispex.rst:10
msgid ""
"PEX files are self-contained executable Python virtual environments.  "
"More specifically, they are carefully constructed zip files with a "
"``#!/usr/bin/env python`` and special ``__main__.py`` that allows you to "
"interact with the PEX runtime.  For more information about zip "
"applications, see `PEP 441 <https://www.python.org/dev/peps/pep-0441/>`_."
msgstr ""
"PEX 文件是独立的可执行的 Python 虚拟环境。 "
"更确切地说，它们是精心构造的压缩文件，带有 ``#!/usr/bin/env python`` 和特殊的 ``__main__.py``，允许你与 PEX 运行时交互。"
"关于 zip 应用程序的更多信息，见 `PEP 441 <https://www.python.org/dev/peps/pep-0441/>`_。"

#: ../../whatispex.rst:16
msgid ""
"To get started building your first pex files, go straight to "
":ref:`buildingpex`."
msgstr ""
"要开始建立你的第一个 pex 文件，请直接进入 :ref:`buildingpex`。"

#: ../../whatispex.rst:20
msgid "Why .pex files?"
msgstr "为什么是 .pex 文件？"

#: ../../whatispex.rst:22
msgid ""
"Files with the .pex extension -- \"PEX files\" or \".pex files\" -- are "
"self-contained executable Python virtual environments.  PEX files make it"
" easy to deploy Python applications: the deployment process becomes "
"simply ``scp``."
msgstr ""
"带有 .pex 扩展名的文件 -- （\"PEX 文件\" 或 \".pex 文件\"） -- 是独立的可执行的 Python 虚拟环境。"
"PEX 文件使部署 Python 应用程序变得很容易：部署过程变得像 ``scp`` 那样简单。"

#: ../../whatispex.rst:27
msgid ""
"Single PEX files can support multiple platforms and python interpreters, "
"making them an attractive option to distribute applications such as "
"command line tools.  For example, this feature allows the convenient use "
"of the same PEX file on both OS X laptops and production Linux AMIs."
msgstr ""
"单个 PEX 文件可以支持多个平台和 Python 解释器，使其成为分发命令行工具等应用程序的一个有吸引力的选择。"
"例如，这个功能允许在 OS X 笔记本和生产的 Linux AMI 上方便地使用同一个 PEX 文件。"

#: ../../whatispex.rst:33
msgid "How do .pex files work?"
msgstr ".pex 文件是如何工作的？"

#: ../../whatispex.rst:35
msgid ""
"PEX files rely on a feature in the Python importer that considers the "
"presence of a ``__main__.py`` within the module as a signal to treat that"
" module as an executable.  For example, ``python -m my_module`` or "
"``python my_module`` will execute ``my_module/__main__.py`` if it exists."
msgstr ""
"PEX 文件依赖于 Python 导入器中的一个特性，它认为模块中存在一个 ``__main__.py`` 是将该模块作为可执行文件的信号。"
"例如，``python -m my_module`` 或 ``python my_module`` 将执行 ``my_module/__main__.py``，如果它存在的话。"

#: ../../whatispex.rst:40
msgid ""
"Because of the flexibility of the Python import subsystem, ``python -m "
"my_module`` works regardless if ``my_module`` is on disk or within a zip "
"file.  Adding ``#!/usr/bin/env python`` to the top of a .zip file "
"containing a ``__main__.py`` and marking it executable will turn it into "
"an executable Python program.  pex takes advantage of this feature in "
"order to build executable .pex files.  This is described more thoroughly "
"in `PEP 441 <https://www.python.org/dev/peps/pep-0441/>`_."
msgstr ""
"由于 Python 导入子系统的灵活性，``python -m my_module`` 不管 ``my_module`` 是在磁盘上还是在一个 zip 文件中，都可以工作。"
"在包含 ``__main__.py`` 的 .zip 文件的顶部添加 ``#!/usr/bin/env python``，并标记为可执行，这将使它变成一个可执行的 Python 程序。"
"pex 利用这一特性，以建立可执行的 .pex 文件。这在 `PEP 441 <https://www.python.org/dev/peps/pep-0441/>`_ 中有更详细的描述。"
